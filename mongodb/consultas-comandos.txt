En la base de datos se puede guardar:
    Usuarios
    Productos
    Disponibilidad de productos
    Pagos
    Ventas/Compras
    Intereses
    Datos de tarjeta crédito
    Contraseñas

- Base de datos NSQL
    - documentos = fila, registro, información de una "entidad"
    - colecciones = agrupan varios documentos
    - base de datos = agrupa muchas colecciones


SQL 
    - crear tabla "Usuarios"
    - creo la estructura de la tabla "Usuarios"
        - nombre (string) 250
        - apellido (string) 250 null
        - edad (int)
        - estado (bool)
        - email (string) 250
        - sexo (string)
    - ingresar datos

NO SQL
    - creo la colección "Usuarios"
    - comienzo a guardar datos.

_________________________________________________________________________________________________________________

OPERADORES MATEMÁTICOS

    $eq: igual que (equal)
    $ne: distinto de (not equal)
    $gt: valores mayores que (greater than)
    $gte: valores mayores o iguales que (greater than or equal)
    $lt: valores menores que (lower than)
    $lte: valores menores o iguales que (lower than or equal)

    $in: sus valores se encuentran dentro del array especificado. 
        Por ejemplo: { "pais": { $in: ["España", "Francia"] }} mostrará todos los documentos 
        cuyo campo pais sea España o Francia

    $nin: operación contraria a $in, obtiene los documentos cuyo valor NO esté en el array


EJEMPLO
    { key: value }

    { marca: "algo" }

    { precio: { $gte : 1000 } }

    { <campo1>: { <operador1>: <valor1> }, ... }

    { edad: { $gt: 30 } }

*********************************************************

CONSULTAS

 - Obtener documentos que campo nombre sea "Andrea Le"
    { nombre: "Andrea Le" }

 - Obtener documentos que nombre NO sea "Andrea Le" 
    { nombre: { $ne: "Andrea Le" } }

 - Obtener documentos donde cursos sea menor a 3
    { cursos: { $lte: 3 } }

 - Obtener documentos que al menos una de las notas sea mayor a 4.5 y menor a 5 
    { notas: { $elemMatch: { $gt: 4.5, $lt: 5 } } }

 - Obtener documentos cuyo ID sea igual a :
   { _id: ObjectId('62466fe7c1233ba7045a9d4f') }

 - Obtener documentos que EXISTE el campo marca:
    { marca: { $exists: true } }

 - Obtener documentos con SKU terminados en 789
    { sku: { $regex: /789$/ } }

 - Documentos con SKU que comienzan con ABC (no importa Mayúsculas o Minúsuclas)
    { sku: { $regex: /^ABC/i } }

 - Documentos que en descripción contiene la letea S
    { descripcion: { $regex: /S/ } }


OR
  { $or: [{ marca: "Apple "},{ nombre: "Emiliano" },{ edad: { $eq: 30 }}] }

 Ejemplo de OR
  { status: "A", $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ] }

 Ejercicio: 
    - Buscar documentos que el nombre comienza con la letra a (may o min) o el precio es menor a 5000
    R/: { $or: [ {nombre: { sku: {$regex: /^a/i } } }, { precio: { $lt: 500000 } } ] }

EJERCICO PRÁCTICO:
    - Alquiler de autos
    - Crear la colección correspondiente (sólo una)
    - Insertar al menos 5 documentos (con los datos necesarios)
    - CONSULTAS:
        - Buscar documentos que el auto sea marca "Peugeot"
        R/ { marca: "Peugeot" }

        - Buscar documentos que el total (precio) sea mayor a 10000 o que el cliente exista, ordenar por precio
        R/ { $or: [ { precio: {$gte: 10000} }, { cliente: {$exists: true} } ] }

        - Buscar documentos que la fecha de alquiler sea del 2022 (usar regex)
        R/ {fecha: {sku: {$regex: /^2025/ } } }

        - Buscar todos los documentos de un cliente particular, mostrar solo el campo total (precio)
        R/ { _id: ObjectId('68ce0db0f3dcf2025fc99351') } Project {precio:  1}
        
        - Buscar documentos que el auto alquilado NO sea "Audi" y SI sea "Fiat" o "Chevrolet" o "Ford"
        R/ { $and: [ { marca: {$ne: "Audi"}}, { $or: [ { marca: {$eq: "Fiat"}}, {marca: {$eq: "Ford" }}] } ] }


RESUMEN:
Operadores Matemáticos: 

    * $eq -- igual que
    * $ne -- diferente que
    * $gt -- mayor que
    * $gte -- mayor o igual que
    * $lt -- menor que
    * lte -- menor o igual que

Ejemplos:

    {precio: 1000}
        busca los elementos que tienen precio 1000

    {precio: {$gt:1000}}
        busca elementos que tienen precio mayor a 1000

    {marca: {$ne:"Apple"}}
        busca los elementos que tienen marca diferente a Apple

    {marca:"Apple" , precio:{$gt:1000}}
        busca elementos que tienen marca Apple y precio mayor a 1000

    {precio:{$gt:200,$lt:1000}} 
        busca los elementos que tienen precio mayor a 200 y menor a 1000

    {_id:ObjectId('maaklsafmjas41414faf')} 
        busca el elemento del ID: maaklsafmjas41414faf


    {$or: [{marca:"Apple"},{precio:1000},color:"verde"]}
        busca los elementos que tengan marca Apple o precio 1000 o color verde

    {marca:"Apple",$or:[{precio:1000}, {color:"verde}]}
        busca los elementos de marca Apple  y además, que tengan precio 1000 o color verde

    {marca: {$exist:true}}
        busca todos los elementos que tienen marca

    {nombre: {$regex:/s$/}}
        busca los elementos que tengan nombre terminado en "s"

    {nombre: {$regex:/^z/i}}
        busca los elementos que tengan nombre que inicie con "z"

    {nombre: {$regex: /a/i}}
        busca los elementos que tengan la letra "a" dentro del nombre (con la letra i al final significa que no distingue entre minusculas y mayusculas)

    {$or:[{$regex:/^a/i}, {precio:{$lt:5000}}]}


    En la opcion de project:

        {nombre:1, marca:1} solo muestra el nombre y marca dentro del filtro (tambien muestra los ID)

        {nombre:1, marca:1, _id:0} solo muestra el nombre y marca dentro del filtro (sin ID)

    En la opcion sort: 

        {precio:1} ordena de menor a mayor (tamnbien se puede con strigns.. ordenaria en orden alfabetico)

        {precio:-1} ordena de mayor a menor (tambien se puede con strings.. ordenaria de z-a)

_________________________________________________________________________________________________________________

Nota: al colocar db hace referencia a la base de datos, y el punto (.) ingresa a las funciones de esa base.

comandos:
    database: 
    
        db -> indica la base de datos la cual está conectado.

        db.help()
            muestra una lista de comandos de ayuda del programa.

        db.stats()
            muestra estadísticas e información acerca de la base de datos que estamos conectados actualmente.

        show dbs
            muestra todas las bases de datos que tenemos.

        use nombreBaseDato
            ingresa a la base de dato especificada.        

        use prueba
            crea una base de datos llamada "prueba".

    collections:

        show collections   
            muestra todas las colecciones dentro de una base de datos.

        db.dropDatabase()
            elimina la base de datos seleccionada.

        db.createCollection("prueba")
            crea una coleccion dentro de la base de datos.

        show collections
            muestra las colecciones creadas en la base de datos.

        db.prueba.drop()
            elimina la colección "prueba".

    db.productos.find()
        muestra todos los documentos en la base de datos "productos".

    db.productos.find({ marca: "Apple"})
        muestra unicamente la busqueda especificada.

    db.productos.find(
        {
            precio: { $gt: 1000}
        }
    )
    esto es una identación que nos permite con un solo parentesis abierto escribir de esta forma dando enter.

- insertar documentos dentro  de la  colección:
    db.productos.insertOne({ nombre: "TV", marca: "LG", precio: 5000, nuevo: true })
        inserta un solo documentos.

    db.productos.find()
        se muestran todos los productos y se verifica el último que se agregó.

    db.productos.insertMany([ {}, {}, {} ])
        inserta múltiples documentos.           
        db.productos.insertMany([ {nombre: "Pantalón", marca: "Chevignon", color: "Blue", precio: 1000},{nombre: "Camisa", marca: "Pilatos", color: "Blanca", precio: 2000},{nombre: "Zapatos", marca: "Ocean Pacific", color: "Gris", precio: 3000}])

- muestra los documentos cuyo campo MARCA existe.
    db.productos.find({ marca: {$exists: true}})

- buscar aquellos documentos, donde exista la MARCA o el PRECIO
    db.productos.find({ $or: [ {marca: {$exists: true}}, {precio: {$exists: true}} ] })

- buscar los siguientes dos documentos de la colección 'my_collection' saltandose el primero y mostrando los siguientes.
    db.my_collection.find().limit(2).skip(1)

---------------------------------------------------------------------------------------------------------------------------

CRUD:
    Create
    Read
    Update
    Delete


CREATE: 
    use nombreBaseDato
    db.collection.insertOne( {} ) / db.collection.insertMany( {}, {}, {} )

READ:
    db.collection.find( {}. {})
        primera llave: criterio de búsqueeda, segunda llave hace referenia al project. ({nombre: 1})

UPDATE:
    db.my_collection.updateOne({}, {})
        primera llave: criterio de búsqueda, segunda llave: actualización.
            db.my_collection.updateOne({sabor: 'Vainilla'}, {$set: {precio: 1000}})
                se actualizó el sabor de 'vainilla' de 600 a 1000

        db.my_collection.updateMany( {precio: {$lt: 700} }, { $set: { valoracion: '3 star' } }) 
            busca la coincidencia de los documentos con precio menor de 700 y a esos documentos le agrega un nuevo campo llamado 'valoración'.
    $set: sirve para agregar.
    $unset: sirve para eliminar.
            
DELETE:
    Se elimina todo el documento entero.
    deleted: true / false.

    db.miColeccion.deleteOne({precio: 600})
        elimina el primer documento que contenga el precio 600

    db.miColeccion.deleteMany({precio: {$gt: 300}})
        elimina todos los documentos que tengan el precio mayor a 300.  
_________________________________________________________________________________________________________________



